<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mungOps – Hardware</title>
    <link>http://localhost:1313/system1/hardware/</link>
    <description>Recent content in Hardware on mungOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Tue, 06 Feb 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/system1/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>What is M/B</title>
      <link>http://localhost:1313/system1/hardware/board/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/board/</guid>
      <description>
        
        
        &lt;h2&gt;Main Board&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;main-board&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#main-board&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;main board란 서버의 주요 &lt;code&gt;구성 부품(CPU, Ram, GPU, Nic 등)들을 설치, 연결, 조절하는 주 회로 기판&lt;/code&gt;(main circuit board)을 메인보드(main board)라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 부품들이 하나로 연결되어 온전한 기능을 할 수 있게 해주는 회로가 존재하는 데, 이 &lt;code&gt;회로들을 통해서 전기를 각 부품에게 배분해주는 역할&lt;/code&gt;을 하는 부품이 메인보드이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;main board가 없으면 cpu가 램으로 처리된 정보를 보낼 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메인보드의 ROM에는 bios라는 일종의 작은 운영체제가 들어있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연결된 &lt;code&gt;모든 장치는 메인보드의 bus를 통하여 정보를 교류&lt;/code&gt;하며 그 흐름을 메인보드가 관리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전원공급장치(PSU)에서 공급된 전기는 메인보드에서 다시 전압을 조절하여 프로세서와 메인보드 및 각종 전자 장치에 공급됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메인보드에는 ram을 꽂을 수 있는 ram slot과 cpu slot, 내장 사운드 카드와 내장 랜카드, 외장 그래픽 카드, 사운드 카드, tv 수신 카드 등을 꽂을 수 있는 pci 슬롯을 제공함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉, main board란 각 파트의 브릿지 역할을 하는 토대이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Main board Part&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;main-board-part&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#main-board-part&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hardware/board00.png&#34; alt=&#34;board&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PSU (Power Supply Unit) : 전원공급장치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NIC (Network Interface Controller) : 외장 네트워크 인터페이스 카드 / IPMI는 내장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PCI (Peripheral Component Interconnect Bus) : GPU, M.2 등 다른 파트를 장착하기 위한 slot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU : 중앙 처리장치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory : 메인 메모리로 주로 RAM(Random Access Memory)를 의미&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;R/C (Raid Controller) : R/C는 각 Disk의 raid 정보를 가지고 있으며, 이를 관리하는 파트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FAN : 전방에서 후방으로 공기를 순환시키는 선풍기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk : 비휘발성 메모리로 데이터를 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case : 내부의 파트를 보호하기 위한 Case&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memory slot은 하기 사진과 같이 채널을 이루고 있다.
&lt;img src=&#34;http://localhost:1313/images/hardware/mem.png&#34; alt=&#34;mem&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>What is RAM</title>
      <link>http://localhost:1313/system1/hardware/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/memory/</guid>
      <description>
        
        
        &lt;h3&gt;What is RAM&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;what-is-ram&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-ram&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RAM이란 &lt;code&gt;Random Access Memory&lt;/code&gt;로 ROM &lt;code&gt;Read Only Memotry&lt;/code&gt;과는 반대로 휘발성 메모리를 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Random Access라는 말은 어느 위치에든 똑같은 속도로 접근하여 읽고 쓸 수 있음을 의미하며, 사용자가 자유롭게 내용을 읽고 쓰고 지울 수 있는 기억장치로, 컴퓨터가 켜지면 &lt;code&gt;CPU는 연산 및 동작에 필요한 내용이 전원이 유지되는 동안&lt;/code&gt;에 RAM에 저장된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주로 주기억장치로 불리며 보조기억장치로는 흔이 우리가 사용하는 Disk(HDD, SDD 등)가 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단, RAM의 범주에는 &amp;lsquo;임의 접근&amp;rsquo;할 수 있는 메모리이므로 HDD 등의 장치들도 RAM의 범주에 들어가기도 하지만, HDD 등의 기억장치와 같이 어느 위치에나 직접 접근할 수 있으나 데이터의 물리적 위치에 따라 읽고 쓰는 시간에 차이가 발생하게 되는 기억장치들은 Direct Access Memory 또는 Direct Access Data Storage라고 부른다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;휘발성과 비휘발성&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;휘발성과-비휘발성&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%ed%9c%98%eb%b0%9c%ec%84%b1%ea%b3%bc-%eb%b9%84%ed%9c%98%eb%b0%9c%ec%84%b1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;휘발성 메모리
&lt;ul&gt;
&lt;li&gt;SRAM (Static Random Access Memory) : 전원이 차단되자마자 &lt;code&gt;즉시 데이터가 삭제&lt;/code&gt;되는 메모리&lt;/li&gt;
&lt;li&gt;DRAM (Dynamic Random Access Memory) : 내부에 전류를 &lt;code&gt;일시적으로 저장&lt;/code&gt;하는 역할을 하여 약 5분 정도 데이터가 유지 될 수 있는 메모리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;메모리 구조&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;메모리-구조&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hardware/ram00.png&#34; alt=&#34;ram&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 실행되기 위해서는 프로그램이 메모리에 로드(load)되어야 하며, 이에따라 변수들이 저장될 메모리가 필요하다.
&lt;ul&gt;
&lt;li&gt;즉, 위 사진과 같이 프로그램의 실행을 위해 &lt;code&gt;Code, Data, Heap, Stack 영역&lt;/code&gt;을 할당 받을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code 영역
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;실행할 프로그램의 코드가 저장되는 영역&lt;/code&gt;으로 텍스트(code) 영역이라고도 부른다.&lt;/li&gt;
&lt;li&gt;상수 및 컴파일 될 기계어가 들어가며, 프로그램이 시작하고 종료될 때까지 메모리를 점유한다.&lt;/li&gt;
&lt;li&gt;CPU에서는 Code 영역에 저장된 명령어를 순차적으로 가져가 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Data 영역
&lt;ul&gt;
&lt;li&gt;프로그램의 &lt;code&gt;전역 변수와 정적(Static) 변수가 저장되는 영역&lt;/code&gt;으로 Data 영역 또한 프로그램이 시작하고 종료될 때까지 메모리를 점유한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Heap 영역
&lt;ul&gt;
&lt;li&gt;사용자가 직접 관리할 수 있는 영역으로, &lt;code&gt;사용자에 의해 동적으로 메모리 공간이 할당되고 해제&lt;/code&gt;된다. (malloc() 또는 new 연산자를 통해 할당 / free() 또는 delete 연산자를 통해서 해제)&lt;/li&gt;
&lt;li&gt;메모리의 낮은 주소에서 높은 주소의 방향으로 할당되며, 런타임 시에 크기가 결정된다.&lt;/li&gt;
&lt;li&gt;프로그램에 필요한 개체의 개수나 크기를 미리 알 수 없는 경우 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Stack 영역
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;함수의 호출과 관계되는 지역 변수와 매개변수가 저장되는 영역&lt;/code&gt;으로, 함수의 호출과 함께 할당되며 함수의 호출이 완료되면 소멸한다.&lt;/li&gt;
&lt;li&gt;함수의 호출 정보를 스택 프레임(Stack frame)이라고 한다.&lt;/li&gt;
&lt;li&gt;메모리의 높은 주소에서 낮은 주소의 방향으로 할당된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>What is CPU</title>
      <link>http://localhost:1313/system1/hardware/cpu/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/cpu/</guid>
      <description>
        
        
        &lt;h2&gt;CPU&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cpu&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cpu&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU란 (Central Processing Unit / main processor)으로 &lt;code&gt;컴퓨터 시스템을 통제하고 프로그램(프로세스)의 연산을 실행하는 핵심적인 컴퓨터의  중앙 제어장치&lt;/code&gt;로 사람으로 따지면 뇌의 역할은 하는 내장형 칩을 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU는 기계어로 쓰인 명령어를 해석하며 실행하며, 외부의 정보를 입력받아 이를 기억하고, 연산하며 외부로 출력하는 역할을 수행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU는 크게 하기 3가지 구분할 수있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;처리할 명령어를 저장하는 &lt;code&gt;프로세서와 레지스터&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;연산을 담당하는 &lt;code&gt;산술논리연산장치(ALU / 연산장치)&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;명령어의 해석과 올바른 실행을 위해 CPU를 제어하는 &lt;code&gt;제어장치(Control Unit)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;CPU의 구조&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cpu의-구조&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cpu%ec%9d%98-%ea%b5%ac%ec%a1%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Core : CPU의 Core 즉 CPU의 핵심적인 역할을 수행해내는 중심부 역할을 말하며 이 코어에서 시스템의 모든 연산처리를 수행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thread : Core는 H/W 적인 관점에서 본 관점이며, Thread는 논리적인 작업 관점에서 처리 단위를 나뉘어 연산처리(HyperThreading)를 수행한다고 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clock : Clock은 동작 주파수로 CPU의 속도를 나타내는 단위이며, CPU가 데이터 양에 따라 속도가 달라질 수 있다. 단, 클럭이 높을 수록 발열 및 전력사용이 증가하기에, 최근에는 Multi Core 및 Multi Thread로 일정량의 Clock을 유지시켜 성능 향상을 꾀하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache Memory : CPU 내부에서 임시로 사용하는 버퍼(Buffer) 메모리 중 하나로, 자주 사용하는 파일 등을 따로 모아두고, 나중에 해당 파일을 다시 실행하면 컴퓨터에서 바로 불러오는 파일을 의미하며, CPU가 하나의 데이터를 처리하는 동안 메인 메모리로부터 다음에 처리할 데이터를 불러와 대기하는 시킬 수 있어, 처리 속도를 높일 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정말 간단하게 요악하자면 Core는 몸통, Thread는 몸통에 달린 팔이라고 할 수 있지만, Thread가 무조건 많다고 좋은 것이 아니며, 대부분 Thread가 높을 수록 Clock이 낮기 때문에 개개인에 맞게 사용하는 것이 옳다고 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;CPU 아키텍처&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cpu-아키텍처&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cpu-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;커널 및 프로세스 : 유저와 CPU 사이에서 서로의 언어를 해석하고 전달(OS, 프로그램)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protection ring : 유저가 사용하는 커널과 시스템이 사용하는 커널을 나눔으로써 시스템 자체를 보호(System call)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Virtaul memroy / Page table : 유저가 사용하는 프로세스가 메모리에 접근하기 전에 사용되는 공간으로 실제 메모리 사용량의 변동성을 억제시켜 이를 통해 시스템의 안전성을 향상시키는 역할을 수행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Context Switching : 실제 CPU는 특정 프로세스만을 지속적으로 점유시키고 있지 않으며, 다른 프로세스를 스왑하면서 사용되는 데, 이를 Context Switching이라 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Page Table Entry의 Protechtion bit : 유저가 사용하는 프로세스의 가상 메모리의 특정 주소는 커널 데이터를 담고 있어, sysc all을 호출하여 커널의 도움을 받으러 갈 때 Page Table을 커널 것으로 교체할 필요가 없어져, 파일의 Read/Write&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;명령어(instrcution) : CPU 명령어 수행 동작&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline : 파이프라인은 CPU가 하나의 명령어를 처리하는 과정도 너무 복잡하고 많기 때문에, 이를 잘게 쪼개서 여러 가지 작은 단계로 나누어 처리하는 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache : 주메모리에서 값을 읽는 동작은 CPU의 명령어 처리 속도에 비하면 한참 느리다. 따라서 이 갭을 줄이기 위해 매우 빠르지만 작은 저장 공간이 CPU에 있는데, 이를 캐시라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분기(Branch) 명령어는 어떤 조건이 맞으면 다음에 실행할 명령어의 위치를 임의로 지정할 수 있게 해준다. 이는 같은 명령어들을 반복해서 실행하거나 조건에 따라 다른 일을 하고 싶을 때 사용하는 매우 기본적인 명령어다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비순차적 명령어 처리(OoOE)는 파이프라인의 송출(Issue) → 실행(Execute) → 회신(Writeback) 단계에 한해서 늦게 온 명령어가 일찍 온 명령어를 새치기할 수 있는 기술&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speculative execution : 어떤 명령어가 특정 파이프라인 단계에 필요한 정보가 없어서 진행이 막혔을 때, 필요한 정보를 예측해서 높은 확률로 맞힌다면 틀렸을 때의 다소 큰 손해를 넘어서는 이익을 취할 수 있다. 고성능의 CPU는 이러한 예측에 기반한 갖가지 기술들을 적극 활용하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;CPU 처리과정&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;cpu-처리과정&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cpu-%ec%b2%98%eb%a6%ac%ea%b3%bc%ec%a0%95&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU의 처리과정을 간단하게 나열하면 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch: 실행할 명령어들을 가져온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decode: 이후 처리를 돕기 위해 명령어의 종류를 선택 및 결정한다. / CISC, RISC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rename: 명령어가 가리키는 레지스터를, 내부에 숨어있는 물리적 레지스터로 매핑한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dispatch: 명령어가 실행하기 위해 기다리는 대기열에 넣는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issue: 대기열에 있는 명령어가 실행될 수 있으면[12] 실행하기 위한 장치로 보낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute: 실행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writeback: 결과값을 레지스터에 써야 한다면 쓴다. 결과값을 기다리고 있던 명령어가 있다면 결과가 생겼다고 알려준다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit: 명령어 수행을 완료하고, 명령어 실행을 위해 할당받은 자원을 모두 토해낸다. 명령어의 실행 결과를 사용자에게 노출시킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>What is Disk</title>
      <link>http://localhost:1313/system1/hardware/disk/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/disk/</guid>
      <description>
        
        
        &lt;h2&gt;Disk&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;disk&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disk&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Disk란 보조기억장치&lt;/code&gt;로 RAM(주기억장치)이 전원이 없어지면 데이터가 삭제되는 반면, &lt;code&gt;Disk는 전원이 없어진 이후에도 데이터가 유지되는 비휘발성 메모리&lt;/code&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;HDD&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;hdd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hdd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HDD (Hard Disk drive)
&lt;ul&gt;
&lt;li&gt;하드 디스크는 플로피 디스크와 같은 자기 기록 매체이나, 플로피 디스크와 다르게 금속 재질의 플래터에 데이터를 기록하기 때문에 플로피디스크와 구분짓기 위해 재질적으로 단단하다는 뜻으로 하드디스크라 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;HDD의 원리와 구조&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;hdd의-원리와-구조&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hdd%ec%9d%98-%ec%9b%90%eb%a6%ac%ec%99%80-%ea%b5%ac%ec%a1%b0&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h1&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;저장되는 모든 데이터는 원리적으로 0 or 1 두 디지털 신호로 의해 이루어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hardware/hdd00.png&#34; alt=&#34;HDD&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>What is NIC</title>
      <link>http://localhost:1313/system1/hardware/nic/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/nic/</guid>
      <description>
        
        
        &lt;h2&gt;Network Interface Card&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;network-interface-card&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#network-interface-card&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NIC(Network Interface Controller)이란 &lt;code&gt;서버가 네트워크에 연결하여 통신하기 위해 사용하는 하드웨어 장치&lt;/code&gt;이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OSI 계층 1(물리 계층)과 계층 2(데이터 링크 계층) 장치를 가지는데, MAC 주소를 사용하여 낮은 수준의 주소 할당 시스템을 제공하고 네트워크 매개체로 물리적인 접근을 가능하게 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/hardware/NIC.jpg&#34; alt=&#34;NIC&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>What is RC</title>
      <link>http://localhost:1313/system1/hardware/rc/</link>
      <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/system1/hardware/rc/</guid>
      <description>
        
        
        &lt;h2&gt;RaidController&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;raidcontroller&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#raidcontroller&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R/C(Raid Controller)란 &lt;code&gt;RAID 인프라에서 디스크 드라이브를 관리하는 스토리지 구성 요소&lt;/code&gt; 유형입니다.&lt;/li&gt;
&lt;li&gt;즉, RAID 디스크를 관리하는 서버에 &lt;code&gt;물리 디스크 드라이브를 논리 장치로 제공&lt;/code&gt;한다.&lt;/li&gt;
&lt;li&gt;RAID 컨트롤러는 디스크 어레이 컨트롤러를 의미힌다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
